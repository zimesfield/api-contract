openapi: 3.0.1
info:
  title: YCP OLMPH User API Contract
  description: 'This is the user contract for registration.  You can find out more about OLMPH
    at [https://ycpolmphajah.com](https://ycpolmphajah.com).'
  termsOfService: 'https://swagger.io/terms/'
  contact:
    email: comenuko@zimesfield.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  - url: '{protocol}://{environment}/services/user'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      environment:
        default: localhost:8081    # Local server
        enum:
          - localhost:8081
          - api         # Production server
          - api.dev     # Development server
          - api.staging # Staging server

tags:
  - name: register-resource
    description: Registration for user
  - name: account-resource
    description: Login user
  - name: user-resource
    description: Operations about user
    externalDocs:
      description: Find out more about our stock
      url: https://swagger.io
paths:
  /api/admin/users/{login}:
    get:
      tags:
        - user-resource
      summary: get the "login" user
      operationId: getUser
      parameters:
        - name: login
          in: path
          description: the login of the user to find
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid username/password supplied
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
      security:
        - oauth: [ jhipster, email, profile ]
        - openId: [ jhipster, email, profile ]
    delete:
      tags:
        - user-resource
      summary: delete the "login" User
      operationId: deleteUser
      parameters:
        - name: login
          in: path
          description: the login of the user to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid username/password supplied
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
      security:
        - oauth: [ jhipster, email, profile ]
        - openId: [ jhipster, email, profile ]

  /api/activate:
    get:
      tags:
        - account-resource
      summary: Activate a registered user
      operationId: activateAccount
      parameters:
        - name: key
          in: query
          description: 'The activation key'
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
        400:
          description: Invalid key supplied
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'

  /api/authenticated:
    get:
      tags:
        - account-resource
      summary: check if the user is authenticated, and return its login.
      operationId: isAuthenticated
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username supplied
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
        404:
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
      security:
        - oauth: [ jhipster, email, profile ]
        - openId: [ jhipster, email, profile ]

  /api/account:
    get:
      tags:
        - account-resource
      summary: Get the current user
      operationId: getAccount
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid user supplied
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
        404:
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
      security:
        - oauth: [ jhipster, email, profile ]
        - openId: [ jhipster, email, profile ]
    post:
      tags:
        - account-resource
      summary: The current user information
      operationId: saveAccount
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRegistrationRequest'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid user supplied
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
        404:
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
      security:
        - oauth: [ jhipster, email, profile ]
        - openId: [ jhipster, email, profile ]
  /api/register:
    post:
      tags:
        - register-resource
      summary: Managed User Registration
      operationId: registerAccount
      requestBody:
        description: register the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        400:
          description: Invalid information supplied
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
      security:
        - oauth: [ ]
        - openId: [ ]

  /api/account/change-password:
    post:
      tags:
        - account-resource
      summary: The current user information
      operationId: changePassword
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid user supplied
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - oauth: [ jhipster, email, profile ]
        - openId: [ jhipster, email, profile ]

  /api/account/reset-password/init:
    post:
      tags:
        - account-resource
      summary: Send an email to reset the password of the user
      operationId: requestPasswordReset
      requestBody:
        description: The mail of the user
        content:
          application/json:
            schema:
              type: string
              example: test@test.com
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid user supplied
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - oauth: [ ]
        - openId: [ ]

  /api/account/reset-password/finish:
    post:
      tags:
        - account-resource
      summary: Finish to reset the password of the user
      operationId: finishPasswordReset
      requestBody:
        description: The generated key and the new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyAndPasswordRequest'
        required: true
      responses:
        200:
          description: successful operation
          content: { }
        400:
          description: Invalid user supplied
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - oauth: [ jhipster, email, profile ]
        - openId: [ jhipster, email, profile ]

components:
  schemas:
    LoginRequest:
      title: LoginRequest
      type: object
      properties:
        username:
          type: string
          example: 'admin'
        password:
          type: string
          example: 'admin'
        rememberMe:
          type: boolean
          example: true
          default: false
      required:
        - username
        - password
    JwtToken:
      title: JwtToken
      type: object
      properties:
        id_token:
          type: string
    ParishRegistrationRequest:
      title: ParishRegistrationRequest
      type: object
      properties:
        requestId:
          type: string
          example: 'olmph'
        member:
          $ref: '#/components/schemas/Member'
        account:
          $ref: '#/components/schemas/Account'
      required:
        - requestId
        - member
        - account

    ParishRegistrationResponse:
      title: ParishRegistrationResponse
      type: object
      properties:
        uuid:
          type: string
        requestId:
          type: string
        customer:
          $ref: '#/components/schemas/Member'
        account:
          $ref: '#/components/schemas/Account'
        status:
          type: string

    ParishRegistrationResponsePage:
      title: AccountRegistrationResponsePage
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ParishRegistrationResponse'
        pageable:
          $ref: '#/components/schemas/PageResponse'

    PageRequest:
      title: PageRequest
      type: object
      properties:
        size:
          type: integer
          example: 10
        pageNumber:
          type: integer
          example: 0
        sort:
          type: string
          example: "uuid, asc"
    PageResponse:
      title: PageResponse
      type: object
      properties:
        totalPages:
          type: integer
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          example: 10
        pageNumber:
          type: integer
          example: 0


    Address:
      type: object
      required:
        - houseNumber
        - street
        - area
        - state
      properties:
        houseNumber:
          type: string
          example: 123
        street:
          type: string
          example: My street is here
        area:
          type: string
          example: eti-osa
        state:
          type: string
          example: Lagos
        country:
          type: string
          example: Nigeria

    ContactInfo:
      type: object
      required:
        - email
        - phone
        - address
      properties:
        email:
          type: string
          example: test@test
        phone:
          type: string
          example: 07012345678
        address:
          $ref: '#/components/schemas/Address'
    PasswordChangeRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          example: test@123
        newPassword:
          type: string
          example: 123@test
    KeyAndPasswordRequest:
      type: object
      required:
        - key
        - newPassword
      properties:
        key:
          type: string
          example: test@123
        newPassword:
          type: string
          example: 123@test
    EmailResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: admin@admin

    UserRequest:
      type: object
      required:
        - login
        - firstName
        - lastName
        - email
        - password
        - phone
        - address
      properties:
        login:
          type: string
          example: omens
        firstName:
          type: string
          example: Omens
        lastName:
          type: string
          example: Odinaka
        email:
          type: string
          example: test@test
        password:
          type: string
          example: qazwsx
        phone:
          type: string
          example: 07012345678
        dayOfBirth:
          type: string
          example: 5
        monthOfBirth:
          $ref: "#/components/schemas/MonthEnum"
        address:
          type: string
          example: 5 Aiyetoro Street, Lagos
        authorities:
          type: array
          items:
            type: string
        userStatus:
          $ref: "#/components/schemas/UserStatusEnum"

    RegistrationRequest:
      type: object
      required:
        - login
        - firstName
        - lastName
        - email
        - password
        - phone
        - address
        - dayOfBirth
        - monthOfBirth
      properties:
        login:
          type: string
          example: omens
        firstName:
          type: string
          example: Omens
        lastName:
          type: string
          example: Odinaka
        email:
          type: string
          example: test@test
        phone:
          type: string
          example: 07012345678
        address:
          type: string
          example: 5 Zimesfield Street, Lagos
        dayOfBirth:
          type: string
          example: 5
        maritalStatus:
          type: string
          example: Single
        gender:
          type: string
          example: Male
        monthOfBirth:
          $ref: "#/components/schemas/MonthEnum"

    RegistrationResponse:
      type: object
      properties:
        uuid:
          type: string
          format: base64
        login:
          type: string
          example: omens
        firstName:
          type: string
          example: Omens
        lastName:
          type: string
          example: Odinaka
        email:
          type: string
          example: test@test

    MonthEnum:
      type: string
      enum:
        - enum: [ January,February,March,April,May,June,July,August,September,October,November,December ]
        - example: January

    UserStatusEnum:
      type: string
      enum:
        - active
        - inactive
        - suspended
      default: active

    PublicUserResponse:
      type: object
      properties:
        uuid:
          type: string
          format: base64
        login:
          type: string
          example: omens

    UserResponse:
      type: object
      properties:
        uuid:
          type: string
          format: base64
        login:
          type: string
          example: omens
        firstName:
          type: string
          example: Omens
        lastName:
          type: string
          example: Odinaka
        email:
          type: string
          example: test@test
        imageUrl:
          type: string
          example: qazwsx
        phone:
          type: string
          example: 07012345678
        activated:
          type: string
          example: true
        createdBy:
          type: string
          example: omens
        createdDate:
          type: string
          example: "2021-09-07"
        lastModifiedBy:
          type: string
          example: omens
        lastModifiedDate:
          type: string
          example: "2021-09-07"
        address:
          type: string
          example: 5 Aiyetoro Street, Lagos
        dayOfBirth:
          type: string
          example: 5
        monthOfBirth:
          type: string
          enum: [ January,February,March,April,May,June,July,August,September,October,November,December ]
          example: January
        authorities:
          type: array
          items:
            type: string
        userStatus:
          type: string
          enum:
            - active
            - inactive
            - deleted
            - suspended
    AdminRegistrationRequest:
      type: object
      required:
        - login
        - firstName
        - lastName
        - email
        - password
        - phone
        - address
      properties:
        uuid:
          type: string
          format: base64
        login:
          type: string
          example: omens
        firstName:
          type: string
          example: Omens
        lastName:
          type: string
          example: Odinaka
        email:
          type: string
          example: test@test
        imageUrl:
          type: string
          example: qazwsx
        phone:
          type: string
          example: 07012345678
        address:
          $ref: '#/components/schemas/Address'
        authorities:
          type: array
          items:
            type: string
        userStatus:
          type: string
          enum:
            - active
            - inactive
            - suspended

    Member:
      type: object
      required:
        - username
        - firstName
        - lastName
        - password
        - personalContact
      properties:
        firstName:
          type: string
          example: Omens
        middleName:
          type: string
          example: Cyker
        lastName:
          type: string
          example: Odinaka
        username:
          type: string
          example: omens
        password:
          type: string
          example: cWF6d3N4
          format: base64
        gender:
          $ref: "#/components/schemas/Gender"
        maritalStatus:
          $ref: "#/components/schemas/MaritalStatus"
    Gender:
      type: string
      enum:
        - male
        - female
      example: male
    MaritalStatus:
      type: string
      enum:
        - single
        - married
        - divorced
      example: married


    Account:
      title: Account
      type: object
      properties:
        name:
          type: string
          example: "OLMPH"
        description:
          type: string
          example: "Our Lady Mother Of Perpetual Help"
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/Contact'
      required:
        - name

    Contact:
      title: Contact
      type: object
      properties:
        email:
          type: string
          example: 'cyp@packam.com'
        phone:
          type: string
          example: '+23470987654321'
      required:
        - email
        - phone

    StockRequest:
      required:
        - name
        - productId
        - quantity
        - attributes
        - flow
      type: object
      properties:
        name:
          type: string
          example: "Jeans Red"
        description:
          type: string
          example: "Gucci Red Jeans"
        productId:
          type: string
          format: base64
          example: 68a68962-4a12-42c1-9a63-d77440cfc976
        quantity:
          type: integer
          example: 10
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
        flow:
          type: string
          description: determines whether to add or deduct stock
          enum:
            - in
            - out
        status:
          type: string
          description: stock status in the stock
          enum:
            - none
            - low
            - available

    StockResponse:
      type: object
      properties:
        uuid:
          type: string
          format: base64
          example: 68a68962-4a12-42c1-9a63-d77440cfc976
        name:
          type: string
          example: "Jeans Red"
        description:
          type: string
        productId:
          type: string
          format: base64
          example: 68a68962-4a12-42c1-9a63-d77440cfc976
        quantity:
          type: integer
          example: 10
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
        flow:
          type: string
          description: determines whether to add or deduct stock
          enum:
            - in
            - out
        status:
          type: string
          description: stock status in the stock
          enum:
            - none
            - low
            - available
            - deleted

    Attribute:
      type: object
      properties:
        name:
          type: string
          example: red
        type:
          type: string
          example: color
        description:
          type: string
          example: The red colour of product

    CommonResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  responses:
    Problem:
      description: error occurred - see status code and problem object for more information.
      content:
        'application/problem+json':
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'


  securitySchemes:
    oauth:
      type: oauth2
      description: OAuth2 authentication with KeyCloak
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:9080/realms/jhipster/protocol/openid-connect/auth
          tokenUrl: http://localhost:9080/realms/jhipster/protocol/openid-connect/token
          scopes:
            jhipster: Jhipster specific claims
            email: Email claims
            profile: Profile claims
    openId:
      type: openIdConnect
      description: OpenID Connect authentication with KeyCloak
      openIdConnectUrl: http://localhost:9080/realms/jhipster/.well-known/openid-configuration
security:
  - oauth: [ jhipster, email, profile ]
  - openId: [ jhipster, email, profile ]